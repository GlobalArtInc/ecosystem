"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13],{1156:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(3917);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},1995:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"packages/nestjs-logger","title":"nestjs-logger","description":"A professional logging module for NestJS with clean architecture, strict typing, and extensibility.","source":"@site/content/packages/nestjs-logger.mdx","sourceDirName":"packages","slug":"/packages/nestjs-logger","permalink":"/packages/nestjs-logger","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestjs-toolkit/tree/main/docs/content/packages/nestjs-logger.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"nestjs-swagger","permalink":"/packages/nestjs-swagger"},"next":{"title":"nestjs-typeorm-pagination","permalink":"/packages/nestjs-typeorm-pagination"}}');var s=t(1273),o=t(1156),i=t(8364),l=t(2168);const a={sidebar_position:2},c="nestjs-logger",d={},h=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Synchronous Configuration",id:"synchronous-configuration",level:3},{value:"Asynchronous Configuration",id:"asynchronous-configuration",level:3},{value:"Usage",id:"usage",level:2},{value:"In Services",id:"in-services",level:3},{value:"HTTP Logging",id:"http-logging",level:3},{value:"Global HTTP Logging",id:"global-http-logging",level:3},{value:"Output Formats",id:"output-formats",level:2},{value:"Text Format (Default)",id:"text-format-default",level:3},{value:"JSON Format",id:"json-format",level:3},{value:"Pino Format",id:"pino-format",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"LoggerService",id:"loggerservice",level:3},{value:"LogOptions Interface",id:"logoptions-interface",level:3},{value:"ExcludeOption Interface",id:"excludeoption-interface",level:3},{value:"Decorators",id:"decorators",level:3},{value:"@LogContext",id:"logcontext",level:4},{value:"@LogMetadata",id:"logmetadata",level:4},{value:"@ExcludeLogging",id:"excludelogging",level:4},{value:"@InjectLogger",id:"injectlogger",level:4},{value:"Excluding HTTP Requests",id:"excluding-http-requests",level:2},{value:"Basic Exclusion",id:"basic-exclusion",level:3},{value:"Using RequestMethod.ALL",id:"using-requestmethodall",level:3},{value:"Wildcard Patterns",id:"wildcard-patterns",level:3},{value:"Real-world Example",id:"real-world-example",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Core Components",id:"core-components",level:3},{value:"Formatters",id:"formatters",level:3},{value:"Utilities",id:"utilities",level:3},{value:"Writers",id:"writers",level:3},{value:"Contracts &amp; Types",id:"contracts--types",level:3},{value:"Security",id:"security",level:2},{value:"Performance",id:"performance",level:2},{value:"Customization",id:"customization",level:2},{value:"Custom Formatter",id:"custom-formatter",level:3},{value:"Custom Writer",id:"custom-writer",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Service Logging",id:"basic-service-logging",level:3},{value:"Controller with HTTP Logging",id:"controller-with-http-logging",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nestjs-logger",children:"nestjs-logger"})}),"\n",(0,s.jsx)(n.p,{children:"A professional logging module for NestJS with clean architecture, strict typing, and extensibility."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(i.A,{groupId:"npm2yarn",children:[(0,s.jsx)(l.A,{value:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install @globalart/nestjs-logger\n"})})}),(0,s.jsx)(l.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add @globalart/nestjs-logger\n"})})}),(0,s.jsx)(l.A,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm add @globalart/nestjs-logger\n"})})}),(0,s.jsx)(l.A,{value:"bun",label:"Bun",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bun add @globalart/nestjs-logger\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This package provides a comprehensive logging solution for NestJS applications with support for multiple output formats, automatic HTTP request logging, and built-in security features. Built on Clean Architecture principles, it offers excellent performance, extensibility, and developer experience."}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83c\udfd7\ufe0f ",(0,s.jsx)(n.strong,{children:"Clean Architecture"})," - separation of concerns, SOLID principles"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd12 ",(0,s.jsx)(n.strong,{children:"Type Safety"})," - full TypeScript type safety"]}),"\n",(0,s.jsxs)(n.li,{children:["\u26a1 ",(0,s.jsx)(n.strong,{children:"Performance"})," - optimized architecture with minimal allocations"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,s.jsx)(n.strong,{children:"Extensibility"})," - easy to add new formatters and transports"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83e\uddea ",(0,s.jsx)(n.strong,{children:"Testability"})," - dependency injection, easy mocking"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,s.jsx)(n.strong,{children:"Automatic Context"})," - class detection from call stack"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,s.jsx)(n.strong,{children:"HTTP Logging"})," - detailed request logging with format consistency"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udee1\ufe0f ",(0,s.jsx)(n.strong,{children:"Security"})," - automatic sanitization of sensitive data"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,s.jsx)(n.strong,{children:"Colored Output"})," - beautiful console logs"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udcca ",(0,s.jsx)(n.strong,{children:"Multiple Formats"})," - Text, JSON, and Pino support"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module } from "@nestjs/common";\nimport { LoggerModule } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [\n    LoggerModule.forRoot({\n      level: "info",\n      timestamp: true,\n      colors: true,\n      format: "text",\n    }),\n  ],\n})\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"synchronous-configuration",children:"Synchronous Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { RequestMethod } from "@nestjs/common";\n\nLoggerModule.forRoot({\n  level: "debug",\n  timestamp: true,\n  colors: true,\n  format: "pino",\n  sensitiveFields: ["password", "secret"],\n  exclude: [\n    { method: RequestMethod.GET, path: "/health" },\n    { method: RequestMethod.GET, path: "/metrics" },\n    { method: RequestMethod.ALL, path: "/favicon.ico" },\n  ],\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous-configuration",children:"Asynchronous Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { ConfigService } from "@nestjs/config";\n\nLoggerModule.forRootAsync({\n  useFactory: (configService: ConfigService) => ({\n    level: configService.get("LOG_LEVEL", "info"),\n    format: configService.get("LOG_FORMAT", "text"),\n    colors: !configService.get("PRODUCTION"),\n    sensitiveFields: configService.get("SENSITIVE_FIELDS", []),\n  }),\n  inject: [ConfigService],\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"in-services",children:"In Services"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { InjectLogger, LoggerService } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectLogger()\n    private readonly logger: LoggerService\n  ) {}\n\n  async createUser(userData: CreateUserDto) {\n    this.logger.log({\n      message: "Creating new user",\n      metadata: { userId: userData.email },\n    });\n\n    try {\n      const user = await this.userRepository.save(userData);\n      this.logger.log({\n        message: "User created successfully",\n        metadata: { id: user.id },\n      });\n      return user;\n    } catch (error) {\n      this.logger.error({\n        message: "Failed to create user",\n        trace: error.stack,\n        metadata: { email: userData.email },\n      });\n      throw error;\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"http-logging",children:"HTTP Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Controller, UseInterceptors } from "@nestjs/common";\nimport { HttpLoggerInterceptor, LogContext } from "@globalart/nestjs-logger";\n\n@Controller("users")\n@UseInterceptors(HttpLoggerInterceptor)\n@LogContext("UserController")\nexport class UserController {\n  // All HTTP requests will be automatically logged\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"global-http-logging",children:"Global HTTP Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module } from "@nestjs/common";\nimport { APP_INTERCEPTOR } from "@nestjs/core";\nimport { LoggerModule, HttpLoggerInterceptor } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [LoggerModule.forRoot()],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: HttpLoggerInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"output-formats",children:"Output Formats"}),"\n",(0,s.jsx)(n.h3,{id:"text-format-default",children:"Text Format (Default)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[2024-01-15T10:30:45.123Z] [INFO] [UserService] Creating new user {"userId":"123"}\n[2024-01-15T10:30:45.335Z] [INFO] [HttpLogger] GET /users - 200 (12ms)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:30:45.123Z",\n  "level": "info",\n  "message": "Creating new user",\n  "context": "UserService",\n  "metadata": {"userId": "123"}\n}\n{\n  "timestamp": "2024-01-15T10:30:45.335Z",\n  "level": "info",\n  "message": "GET /users - 200 (12ms)",\n  "context": "HttpLogger",\n  "metadata": {\n    "requestId": "req-123",\n    "method": "GET",\n    "url": "/users",\n    "statusCode": 200,\n    "responseTime": 12,\n    "remoteAddress": "127.0.0.1"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pino-format",children:"Pino Format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "level": 30,\n  "time": 1642247445123,\n  "pid": 1234,\n  "hostname": "app-server",\n  "req": {\n    "id": "req-123",\n    "method": "GET",\n    "url": "/users",\n    "query": {},\n    "params": {},\n    "headers": {},\n    "remoteAddress": "127.0.0.1"\n  },\n  "res": { "statusCode": 200, "headers": {} },\n  "responseTime": 12,\n  "msg": "request completed"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"loggerservice",children:"LoggerService"}),"\n",(0,s.jsx)(n.p,{children:"The main logging service that provides methods for different log levels."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"log(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Information message"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Error with trace"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"warn(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Warning message"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"debug(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Debug information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"verbose(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Verbose logging"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"logHttpRequest(entry: HttpRequestLogEntry)"})}),(0,s.jsx)(n.td,{children:"Log HTTP request (Pino format only)"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"logoptions-interface",children:"LogOptions Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface LogOptions {\n  message: string;\n  context?: string;\n  metadata?: Record<string, unknown>;\n  trace?: string;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"excludeoption-interface",children:"ExcludeOption Interface"}),"\n",(0,s.jsx)(n.p,{children:"Configuration for excluding specific HTTP requests from logging."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface ExcludeOption {\n  method: RequestMethod;\n  path: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"path"})," field supports wildcard patterns using ",(0,s.jsx)(n.code,{children:"*"}),". Examples:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"/api/v*/health"'})," - matches ",(0,s.jsx)(n.code,{children:"/api/v1/health"}),", ",(0,s.jsx)(n.code,{children:"/api/v2/health"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"/users/*"'})," - matches any path starting with ",(0,s.jsx)(n.code,{children:"/users/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"/static/*"'})," - matches any static file path"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"decorators",children:"Decorators"}),"\n",(0,s.jsx)(n.h4,{id:"logcontext",children:"@LogContext"}),"\n",(0,s.jsx)(n.p,{children:"Set context for class or method."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { LogContext } from "@globalart/nestjs-logger";\n\n@Controller("users")\n@LogContext("UserController")\nexport class UserController {\n  @Get()\n  @LogContext("UserController.getAllUsers")\n  async getAllUsers() {\n    // ...\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"logmetadata",children:"@LogMetadata"}),"\n",(0,s.jsx)(n.p,{children:"Add metadata to logs."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { LogMetadata } from "@globalart/nestjs-logger";\n\n@Controller("users")\nexport class UserController {\n  @Get()\n  @LogMetadata({ operation: "getAllUsers", version: "v1" })\n  async getAllUsers() {\n    // ...\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"excludelogging",children:"@ExcludeLogging"}),"\n",(0,s.jsx)(n.p,{children:"Exclude logging for controller or method."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { ExcludeLogging } from "@globalart/nestjs-logger";\n\n@Controller("health")\nexport class HealthController {\n  @Get()\n  @ExcludeLogging()\n  async check() {\n    return { status: "ok" };\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"injectlogger",children:"@InjectLogger"}),"\n",(0,s.jsx)(n.p,{children:"Convenient decorator for injecting LoggerService."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { InjectLogger, LoggerService } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectLogger()\n    private readonly logger: LoggerService\n  ) {}\n\n  async createUser(userData: CreateUserDto) {\n    this.logger.log({\n      message: "Creating new user",\n      metadata: { email: userData.email },\n    });\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"excluding-http-requests",children:"Excluding HTTP Requests"}),"\n",(0,s.jsxs)(n.p,{children:["You can exclude specific HTTP requests from logging using the ",(0,s.jsx)(n.code,{children:"exclude"})," configuration option. This is useful for health checks, metrics endpoints, and other requests that don't need to be logged."]}),"\n",(0,s.jsx)(n.h3,{id:"basic-exclusion",children:"Basic Exclusion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { RequestMethod } from "@nestjs/common";\nimport { LoggerModule } from "@globalart/nestjs-logger";\n\nLoggerModule.forRoot({\n  exclude: [\n    { method: RequestMethod.GET, path: "/health" },\n    { method: RequestMethod.GET, path: "/metrics" },\n  ],\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-requestmethodall",children:"Using RequestMethod.ALL"}),"\n",(0,s.jsx)(n.p,{children:"To exclude a path for all HTTP methods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'exclude: [\n  { method: RequestMethod.ALL, path: "/favicon.ico" },\n  { method: RequestMethod.ALL, path: "/robots.txt" },\n];\n'})}),"\n",(0,s.jsx)(n.h3,{id:"wildcard-patterns",children:"Wildcard Patterns"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"path"})," field supports wildcard patterns using ",(0,s.jsx)(n.code,{children:"*"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'exclude: [\n  // Exclude all API health endpoints\n  { method: RequestMethod.GET, path: "/api/*/health" },\n  // Exclude all static files\n  { method: RequestMethod.ALL, path: "/static/*" },\n  // Exclude versioned endpoints\n  { method: RequestMethod.ALL, path: "/api/v*/status" },\n];\n'})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-example",children:"Real-world Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module, RequestMethod } from "@nestjs/common";\nimport { LoggerModule } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [\n    LoggerModule.forRoot({\n      level: "info",\n      format: "json",\n      exclude: [\n        // Health checks\n        { method: RequestMethod.GET, path: "/health" },\n        { method: RequestMethod.GET, path: "/health/ready" },\n        { method: RequestMethod.GET, path: "/health/live" },\n\n        // Metrics and monitoring\n        { method: RequestMethod.GET, path: "/metrics" },\n        { method: RequestMethod.GET, path: "/prometheus" },\n\n        // Static assets\n        { method: RequestMethod.ALL, path: "/favicon.ico" },\n        { method: RequestMethod.ALL, path: "/robots.txt" },\n        { method: RequestMethod.GET, path: "/static/*" },\n\n        // API documentation (if you don\'t want to log these)\n        { method: RequestMethod.GET, path: "/api-docs" },\n        { method: RequestMethod.GET, path: "/api-docs/*" },\n\n        // Versioned health endpoints\n        { method: RequestMethod.GET, path: "/api/v*/health" },\n      ],\n    }),\n  ],\n})\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Option"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"level"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LogLevel"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'info'"})}),(0,s.jsx)(n.td,{children:"Logging level"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"timestamp"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Show timestamp"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"colors"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Colored output"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"format"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LogFormat"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'text'"})}),(0,s.jsx)(n.td,{children:"Output format"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"context"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Default context"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sensitiveFields"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string[]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[...]"})}),(0,s.jsx)(n.td,{children:"Fields to sanitize"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"exclude"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ExcludeOption[]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[]"})}),(0,s.jsx)(n.td,{children:"HTTP requests to exclude from logging"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The package is built on Clean Architecture principles with clear separation of concerns:"}),"\n",(0,s.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LoggerModule"})," - Main module with configuration and dependency injection setup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LoggerService"})," - Primary logging service implementing NestJS LoggerService interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HttpLoggerInterceptor"})," - HTTP request logging interceptor with format consistency"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"formatters",children:"Formatters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TextFormatter"})," - Human-readable text output with colors and timestamps"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JsonFormatter"})," - Structured JSON output for machine processing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PinoFormatter"})," - Pino-compatible JSON output for high-performance logging"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"utilities",children:"Utilities"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ContextResolver"})," - Automatic context detection from call stack"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DataSanitizer"})," - Sensitive data sanitization for security"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RequestIdGenerator"})," - Unique request ID generation for tracing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"writers",children:"Writers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ConsoleWriter"})," - Console output (extensible for other transports)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"contracts--types",children:"Contracts & Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ILogger"})," - Logger interface for extensibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ILogFormatter"})," - Formatter interface for custom formats"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ILogWriter"})," - Writer interface for custom transports"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LogEntry"})," - Standard log entry structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HttpRequestLogEntry"})," - HTTP-specific log entry structure"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,s.jsx)(n.p,{children:"The logger automatically sanitizes sensitive fields to prevent data leakage:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"password"}),", ",(0,s.jsx)(n.code,{children:"pass"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"token"}),", ",(0,s.jsx)(n.code,{children:"accessToken"}),", ",(0,s.jsx)(n.code,{children:"refreshToken"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"secret"}),", ",(0,s.jsx)(n.code,{children:"key"}),", ",(0,s.jsx)(n.code,{children:"apiKey"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authorization"}),", ",(0,s.jsx)(n.code,{children:"auth"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"credential"}),", ",(0,s.jsx)(n.code,{children:"credentials"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can customize the list of sensitive fields in the configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'LoggerModule.forRoot({\n  sensitiveFields: ["password", "secret", "apiKey", "customField"],\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,s.jsx)(n.p,{children:"The logger is optimized for performance with several key features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimal allocations"})," in hot paths"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy formatter initialization"})," to reduce startup time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimized context resolution"})," with caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient data sanitization"})," with minimal overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Format-specific HTTP logging"})," optimization"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(n.h3,{id:"custom-formatter",children:"Custom Formatter"}),"\n",(0,s.jsx)(n.p,{children:"You can create custom formatters by extending the BaseFormatter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { BaseFormatter } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class CustomFormatter extends BaseFormatter {\n  format(entry: LogEntry): string {\n    return `[${entry.level.toUpperCase()}] ${entry.message}`;\n  }\n\n  formatHttpRequest(entry: HttpRequestLogEntry): string {\n    return JSON.stringify(entry);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-writer",children:"Custom Writer"}),"\n",(0,s.jsx)(n.p,{children:"You can implement custom writers for different transports:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { ILogWriter } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class FileWriter implements ILogWriter {\n  write(formattedLog: string): void {\n    // Write to file, database, or external service\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-service-logging",children:"Basic Service Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { InjectLogger, LoggerService } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class EmailService {\n  constructor(\n    @InjectLogger()\n    private readonly logger: LoggerService\n  ) {}\n\n  async sendEmail(to: string, subject: string) {\n    this.logger.log({\n      message: "Sending email",\n      metadata: { to, subject },\n    });\n\n    try {\n      // Email sending logic\n      this.logger.log({\n        message: "Email sent successfully",\n        metadata: { to },\n      });\n    } catch (error) {\n      this.logger.error({\n        message: "Failed to send email",\n        trace: error.stack,\n        metadata: { to, subject },\n      });\n      throw error;\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"controller-with-http-logging",children:"Controller with HTTP Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Controller, Get, Post, Body, UseInterceptors } from "@nestjs/common";\nimport {\n  HttpLoggerInterceptor,\n  LogContext,\n  LogMetadata,\n} from "@globalart/nestjs-logger";\n\n@Controller("users")\n@UseInterceptors(HttpLoggerInterceptor)\n@LogContext("UserController")\nexport class UserController {\n  @Get()\n  @LogMetadata({ operation: "getAllUsers" })\n  async getAllUsers() {\n    return [];\n  }\n\n  @Post()\n  @LogMetadata({ operation: "createUser" })\n  async createUser(@Body() userData: CreateUserDto) {\n    return { id: 1, ...userData };\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module, RequestMethod } from "@nestjs/common";\nimport { ConfigService } from "@nestjs/config";\nimport { LoggerModule } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [\n    LoggerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        level: configService.get("LOG_LEVEL", "info"),\n        format: configService.get("LOG_FORMAT", "text"),\n        colors: !configService.get("PRODUCTION"),\n        timestamp: true,\n        context: "MyApp",\n        sensitiveFields: [\n          "password",\n          "token",\n          "secret",\n          "apiKey",\n          ...configService.get("CUSTOM_SENSITIVE_FIELDS", []),\n        ],\n        exclude: [\n          { method: RequestMethod.GET, path: "/health" },\n          { method: RequestMethod.GET, path: "/metrics" },\n          { method: RequestMethod.ALL, path: "/favicon.ico" },\n          { method: RequestMethod.GET, path: "/status" },\n          // Wildcard patterns are supported\n          { method: RequestMethod.ALL, path: "/api/v*/health" },\n        ],\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class AppModule {}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},2168:(e,n,t)=>{t.d(n,{A:()=>i});t(3917);var r=t(3372);const s={tabItem:"tabItem_LJY2"};var o=t(1273);function i({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:n,children:e})}},8364:(e,n,t)=>{t.d(n,{A:()=>L});var r=t(3917),s=t(3372),o=t(5919),i=t(482),l=t(2191),a=t(1040),c=t(5809),d=t(983);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,a.aZ)(s),(0,r.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=u(e),[i,a]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o})),[c,h]=p({queryString:t,groupId:s}),[x,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),j=(()=>{const e=c??x;return g({value:e,tabValues:o})?e:null})();(0,l.A)(()=>{j&&a(j)},[j]);return{selectedValue:i,selectValue:(0,r.useCallback)(e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),m(e)},[h,m,o]),tabValues:o}}var m=t(9405);const j={tabList:"tabList_Vgdh",tabItem:"tabItem_Sh6k"};var f=t(1273);function v({className:e,block:n,selectedValue:t,selectValue:r,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:a}=(0,o.a_)(),c=e=>{const n=e.currentTarget,s=l.indexOf(n),o=i[s].value;o!==t&&(a(n),r(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:r})=>(0,f.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...r,className:(0,s.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function y({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function b(e){const n=x(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",j.tabList),children:[(0,f.jsx)(v,{...n,...e}),(0,f.jsx)(y,{...n,...e})]})}function L(e){const n=(0,m.A)();return(0,f.jsx)(b,{...e,children:h(e.children)},String(n))}}}]);