"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[749],{4318:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(4700);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},4458:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"packages/nestjs-typeorm-pagination","title":"nestjs-typeorm-pagination","description":"A comprehensive pagination and filtering utility for TypeORM repositories and query builders in NestJS applications.","source":"@site/content/packages/nestjs-typeorm-pagination.mdx","sourceDirName":"packages","slug":"/packages/nestjs-typeorm-pagination","permalink":"/docs/packages/nestjs-typeorm-pagination","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"nestjs-swagger","permalink":"/docs/packages/nestjs-swagger"}}');var t=r(7968),s=r(4318);const a={sidebar_position:2},l="nestjs-typeorm-pagination",o={},c=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Paginate Decorator",id:"paginate-decorator",level:3},{value:"PaginateQuery Interface",id:"paginatequery-interface",level:4},{value:"Paginate Function",id:"paginate-function",level:3},{value:"Parameters",id:"parameters",level:4},{value:"PaginateConfig Interface",id:"paginateconfig-interface",level:4},{value:"Paginated Result",id:"paginated-result",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Pagination",id:"basic-pagination",level:3},{value:"With Search and Filtering",id:"with-search-and-filtering",level:3},{value:"With Relations",id:"with-relations",level:3},{value:"Using Query Builder",id:"using-query-builder",level:3},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Pagination",id:"pagination",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Search",id:"search",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Selection",id:"selection",level:3},{value:"Filter Operators",id:"filter-operators",level:2},{value:"Swagger Integration",id:"swagger-integration",level:2},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Custom Where Conditions",id:"custom-where-conditions",level:3},{value:"Multiple Where Conditions",id:"multiple-where-conditions",level:3},{value:"Custom Query Builder with Joins",id:"custom-query-builder-with-joins",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Contributing",id:"contributing",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"nestjs-typeorm-pagination",children:"nestjs-typeorm-pagination"})}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive pagination and filtering utility for TypeORM repositories and query builders in NestJS applications."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @globalart/nestjs-typeorm-pagination\n"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This package provides a complete solution for implementing pagination, filtering, sorting, and searching in your NestJS applications using TypeORM. It includes decorators, DTOs, and utility functions that make it easy to add these features to your API endpoints."}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83d\udcc4 ",(0,t.jsx)(n.strong,{children:"Pagination"})," - Easy-to-use pagination with configurable limits"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,t.jsx)(n.strong,{children:"Search"})," - Full-text search across multiple columns"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,t.jsx)(n.strong,{children:"Filtering"})," - Advanced filtering with multiple operators"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udcca ",(0,t.jsx)(n.strong,{children:"Sorting"})," - Multi-column sorting with custom order"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83c\udfa8 ",(0,t.jsx)(n.strong,{children:"Swagger Integration"})," - Automatic OpenAPI documentation"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,t.jsx)(n.strong,{children:"TypeScript Support"})," - Full type safety and IntelliSense"]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,t.jsx)(n.strong,{children:"Performance Optimized"})," - Efficient queries with proper indexing"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\nimport { Paginate, PaginateQuery } from '@globalart/nestjs-typeorm-pagination';\nimport { paginate, Paginated } from '@globalart/nestjs-typeorm-pagination';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"paginate-decorator",children:"Paginate Decorator"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@Paginate()"})," decorator extracts pagination parameters from the request query and provides a structured ",(0,t.jsx)(n.code,{children:"PaginateQuery"})," object."]}),"\n",(0,t.jsx)(n.h4,{id:"paginatequery-interface",children:"PaginateQuery Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface PaginateQuery {\n  page?: number;           // Current page number\n  limit?: number;          // Items per page\n  sortBy?: [string, string][]; // Sorting configuration\n  searchBy?: string[];     // Columns to search in\n  search?: string;         // Search term\n  filter?: { [column: string]: string | string[] }; // Filter conditions\n  select?: string[];       // Columns to select\n  path: string;           // Current request path\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"paginate-function",children:"Paginate Function"}),"\n",(0,t.jsxs)(n.p,{children:["The main ",(0,t.jsx)(n.code,{children:"paginate"})," function handles the pagination logic and returns a ",(0,t.jsx)(n.code,{children:"Paginated"})," result."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"query"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"PaginateQuery"})}),(0,t.jsx)(n.td,{children:"Pagination query parameters"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"repo"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Repository<T> | SelectQueryBuilder<T>"})}),(0,t.jsx)(n.td,{children:"TypeORM repository or query builder"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"PaginateConfig<T>"})}),(0,t.jsx)(n.td,{children:"Pagination configuration"})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"paginateconfig-interface",children:"PaginateConfig Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface PaginateConfig<T> {\n  relations?: FindOptionsRelations<T> | RelationColumn<T>[] | FindOptionsRelationByString;\n  sortableColumns: Column<T>[];                    // Columns that can be sorted\n  nullSort?: 'first' | 'last';                     // How to handle null values in sorting\n  searchableColumns?: Column<T>[];                 // Columns to search in\n  select?: Column<T>[] | string[];                 // Columns to select\n  maxLimit?: number;                               // Maximum items per page\n  defaultSortBy?: SortBy<T>;                       // Default sorting\n  defaultLimit?: number;                           // Default items per page\n  where?: FindOptionsWhere<T> | FindOptionsWhere<T>[]; // Additional where conditions\n  filterableColumns?: {                            // Filterable columns and operators\n    [key in Column<T> | string]?: (FilterOperator | FilterSuffix)[] | true;\n  };\n  loadEagerRelations?: boolean;                    // Load eager relations\n  withDeleted?: boolean;                           // Include soft-deleted records\n  paginationType?: PaginationType;                 // Pagination type\n  relativePath?: boolean;                          // Use relative paths\n  origin?: string;                                 // Origin URL\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"paginated-result",children:"Paginated Result"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Paginated<T> {\n  data: T[];                    // Array of items\n  payload: {\n    pagination: {\n      limit: number;            // Items per page\n      totalItems: number;       // Total number of items\n      page: number;             // Current page\n      total: number;            // Total number of pages\n      sortBy: SortBy<T>;        // Current sorting\n      searchBy: Column<T>[];    // Search columns\n      search: string;           // Search term\n      select: string[];         // Selected columns\n      filter?: { [column: string]: string | string[] }; // Applied filters\n      links: {                  // Pagination links\n        url?: string;\n        label?: string;\n        active?: boolean;\n        page?: number;\n      }[];\n    };\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"basic-pagination",children:"Basic Pagination"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\nimport { Paginate, PaginateQuery } from '@globalart/nestjs-typeorm-pagination';\nimport { paginate, Paginated } from '@globalart/nestjs-typeorm-pagination';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      defaultSortBy: [['createdAt', 'DESC']],\n      defaultLimit: 20,\n      maxLimit: 100,\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-search-and-filtering",children:"With Search and Filtering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n        status: ['eq', 'in'],\n      },\n      defaultSortBy: [['createdAt', 'DESC']],\n      defaultLimit: 20,\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-relations",children:"With Relations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('posts')\nexport class PostsController {\n  constructor(\n    @InjectRepository(Post)\n    private readonly postRepository: Repository<Post>,\n  ) {}\n\n  @Get()\n  async getPosts(@Paginate() query: PaginateQuery): Promise<Paginated<Post>> {\n    return paginate(query, this.postRepository, {\n      sortableColumns: ['id', 'title', 'createdAt'],\n      searchableColumns: ['title', 'content'],\n      relations: ['author', 'categories'],\n      filterableColumns: {\n        authorId: ['eq'],\n        categoryId: ['in'],\n        published: ['eq'],\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-query-builder",children:"Using Query Builder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get('active')\n  async getActiveUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    const queryBuilder = this.userRepository\n      .createQueryBuilder('user')\n      .where('user.isActive = :isActive', { isActive: true });\n\n    return paginate(query, queryBuilder, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"page"})," - Page number (default: 1)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"limit"})," - Items per page (default: 20, max: 100)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sorting",children:"Sorting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sortBy"})," - Sort configuration in format ",(0,t.jsx)(n.code,{children:"column:direction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?sortBy=name:ASC&sortBy=createdAt:DESC"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"search",children:"Search"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"search"})," - Search term"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"searchBy"})," - Columns to search in","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?search=john&searchBy=name&searchBy=email"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter.column"})," - Filter by specific column","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?filter.name=john&filter.createdAt.gte=2023-01-01"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"selection",children:"Selection"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"select"})," - Columns to select","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?select=id,name,email"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"filter-operators",children:"Filter Operators"}),"\n",(0,t.jsx)(n.p,{children:"The package supports various filter operators:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eq"})," - Equal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ne"})," - Not equal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gt"})," - Greater than"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gte"})," - Greater than or equal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lt"})," - Less than"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lte"})," - Less than or equal"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"in"})," - In array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notIn"})," - Not in array"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"like"})," - Like pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notLike"})," - Not like pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isNull"})," - Is null"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isNotNull"})," - Is not null"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"swagger-integration",children:"Swagger Integration"}),"\n",(0,t.jsx)(n.p,{children:"The package includes Swagger decorators for automatic API documentation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\nimport { \n  Paginate, \n  PaginateQuery,\n  ApiPaginatedQuery,\n  ApiOkPaginatedResponse \n} from '@globalart/nestjs-typeorm-pagination';\nimport { paginate, Paginated } from '@globalart/nestjs-typeorm-pagination';\nimport { User } from './user.entity';\n\n@Controller('users')\nexport class UsersController {\n  @Get()\n  @ApiPaginatedQuery()\n  @ApiOkPaginatedResponse(User)\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,t.jsx)(n.h3,{id:"custom-where-conditions",children:"Custom Where Conditions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Get('admin')\nasync getAdminUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n  return paginate(query, this.userRepository, {\n    sortableColumns: ['id', 'name', 'email', 'createdAt'],\n    where: { role: 'admin' },\n    searchableColumns: ['name', 'email'],\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-where-conditions",children:"Multiple Where Conditions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Get('filtered')\nasync getFilteredUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n  return paginate(query, this.userRepository, {\n    sortableColumns: ['id', 'name', 'email', 'createdAt'],\n    where: [\n      { role: 'admin' },\n      { role: 'moderator' }\n    ],\n    searchableColumns: ['name', 'email'],\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-query-builder-with-joins",children:"Custom Query Builder with Joins"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Get('with-posts')\nasync getUsersWithPosts(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n  const queryBuilder = this.userRepository\n    .createQueryBuilder('user')\n    .leftJoinAndSelect('user.posts', 'post')\n    .where('post.published = :published', { published: true });\n\n  return paginate(query, queryBuilder, {\n    sortableColumns: ['user.id', 'user.name', 'user.email', 'user.createdAt'],\n    searchableColumns: ['user.name', 'user.email'],\n    filterableColumns: {\n      'user.name': true,\n      'user.email': true,\n      'user.createdAt': ['gte', 'lte'],\n    },\n  });\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Define sortable columns"})," - Always specify which columns can be sorted to prevent SQL injection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set reasonable limits"})," - Use ",(0,t.jsx)(n.code,{children:"maxLimit"})," to prevent performance issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Index searchable columns"})," - Add database indexes on columns used for search"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use relations wisely"})," - Only load necessary relations to avoid N+1 queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate filter operators"})," - Only allow safe filter operators for each column"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache when possible"})," - Consider caching for frequently accessed data"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add database indexes on sortable and searchable columns"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"select"})," to limit returned columns when full entities aren't needed"]}),"\n",(0,t.jsx)(n.li,{children:"Consider using query builder for complex queries with joins"}),"\n",(0,t.jsxs)(n.li,{children:["Set appropriate ",(0,t.jsx)(n.code,{children:"maxLimit"})," to prevent large result sets"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"withDeleted: false"})," when you don't need soft-deleted records"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,t.jsxs)(n.p,{children:["This package is part of the ",(0,t.jsx)(n.code,{children:"nestjs-toolkit"})," monorepo. For contributing guidelines, please refer to the main repository documentation."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);