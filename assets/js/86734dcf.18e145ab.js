"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[492],{803:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"packages/nestjs-microservices","title":"@globalart/nestjs-microservices","description":"A simple microservices builder for NestJS that provides convenient decorators for different transport patterns.","source":"@site/content/packages/nestjs-microservices.mdx","sourceDirName":"packages","slug":"/packages/nestjs-microservices","permalink":"/packages/nestjs-microservices","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/nestjs-toolkit/tree/main/docs/content/packages/nestjs-microservices.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"@globalart/nestjs-typeorm-pagination","permalink":"/packages/nestjs-typeorm-pagination"}}');var s=t(1273),a=t(2993);const i={sidebar_position:3},o="@globalart/nestjs-microservices",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Description",id:"description",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Transport Pattern Decorators",id:"transport-pattern-decorators",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Usage Examples",id:"usage-examples",level:2},{value:"TCP Transport",id:"tcp-transport",level:3},{value:"Redis Transport",id:"redis-transport",level:3},{value:"MQTT Transport",id:"mqtt-transport",level:3},{value:"gRPC Transport",id:"grpc-transport",level:3},{value:"NATS Transport",id:"nats-transport",level:3},{value:"RabbitMQ Transport",id:"rabbitmq-transport",level:3},{value:"Kafka Transport",id:"kafka-transport",level:3},{value:"Multiple Transport Support",id:"multiple-transport-support",level:2},{value:"Type Safety",id:"type-safety",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"globalartnestjs-microservices",children:"@globalart/nestjs-microservices"})}),"\n",(0,s.jsx)(r.p,{children:"A simple microservices builder for NestJS that provides convenient decorators for different transport patterns."}),"\n",(0,s.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"npm install @globalart/nestjs-microservices\n"})}),"\n",(0,s.jsx)(r.p,{children:"or"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"yarn add @globalart/nestjs-microservices\n"})}),"\n",(0,s.jsx)(r.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(r.p,{children:"This package provides convenient decorators for different transport patterns in NestJS microservices. It simplifies the process of creating message handlers for various transport protocols by providing dedicated decorators for each transport type."}),"\n",(0,s.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"\ud83d\ude80 Simple decorators for different transport patterns"}),"\n",(0,s.jsx)(r.li,{children:"\ud83d\udd27 Support for TCP, Redis, MQTT, gRPC, NATS, RabbitMQ, and Kafka"}),"\n",(0,s.jsx)(r.li,{children:"\ud83d\udccb Type-safe message handling"}),"\n",(0,s.jsx)(r.li,{children:"\ud83d\udee1\ufe0f Full TypeScript typing"}),"\n",(0,s.jsx)(r.li,{children:"\ud83c\udfaf Easy to use and integrate"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { TcpPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class UserController {\n  @TcpPattern('user.created')\n  async handleUserCreated(data: UserCreatedEvent) {\n    return this.userService.processUser(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(r.h3,{id:"transport-pattern-decorators",children:"Transport Pattern Decorators"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Decorator"}),(0,s.jsx)(r.th,{children:"Transport"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TcpPattern"})}),(0,s.jsx)(r.td,{children:"TCP"}),(0,s.jsx)(r.td,{children:"TCP message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"RedisPattern"})}),(0,s.jsx)(r.td,{children:"Redis"}),(0,s.jsx)(r.td,{children:"Redis message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"MqttPattern"})}),(0,s.jsx)(r.td,{children:"MQTT"}),(0,s.jsx)(r.td,{children:"MQTT message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"GrpcPattern"})}),(0,s.jsx)(r.td,{children:"gRPC"}),(0,s.jsx)(r.td,{children:"gRPC message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NatsPattern"})}),(0,s.jsx)(r.td,{children:"NATS"}),(0,s.jsx)(r.td,{children:"NATS message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"RabbitMqPattern"})}),(0,s.jsx)(r.td,{children:"RabbitMQ"}),(0,s.jsx)(r.td,{children:"RabbitMQ message pattern decorator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"KafkaPattern"})}),(0,s.jsx)(r.td,{children:"Kafka"}),(0,s.jsx)(r.td,{children:"Kafka message pattern decorator"})]})]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Parameter"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"name"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"string"})}),(0,s.jsx)(r.td,{children:"Pattern name for message routing"})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(r.h3,{id:"tcp-transport",children:"TCP Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { TcpPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class UserController {\n  @TcpPattern('user.created')\n  async handleUserCreated(data: UserCreatedEvent) {\n    return this.userService.processUser(data);\n  }\n\n  @TcpPattern('user.updated')\n  async handleUserUpdated(data: UserUpdatedEvent) {\n    return this.userService.updateUser(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"redis-transport",children:"Redis Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { RedisPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class NotificationController {\n  @RedisPattern('notification.send')\n  async handleNotification(data: NotificationData) {\n    return this.notificationService.send(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"mqtt-transport",children:"MQTT Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { MqttPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class SensorController {\n  @MqttPattern('sensor.data')\n  async handleSensorData(data: SensorReading) {\n    return this.sensorService.processReading(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"grpc-transport",children:"gRPC Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { GrpcPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class OrderController {\n  @GrpcPattern('order.process')\n  async handleOrder(data: OrderRequest) {\n    return this.orderService.processOrder(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"nats-transport",children:"NATS Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { NatsPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class PaymentController {\n  @NatsPattern('payment.completed')\n  async handlePayment(data: PaymentEvent) {\n    return this.paymentService.confirmPayment(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"rabbitmq-transport",children:"RabbitMQ Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { RabbitMqPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class EmailController {\n  @RabbitMqPattern('email.send')\n  async handleEmail(data: EmailRequest) {\n    return this.emailService.sendEmail(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"kafka-transport",children:"Kafka Transport"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { KafkaPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class AnalyticsController {\n  @KafkaPattern('analytics.event')\n  async handleAnalytics(data: AnalyticsEvent) {\n    return this.analyticsService.trackEvent(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"multiple-transport-support",children:"Multiple Transport Support"}),"\n",(0,s.jsx)(r.p,{children:"You can use multiple transport patterns in the same controller:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { Controller } from '@nestjs/common';\nimport { TcpPattern, RedisPattern, KafkaPattern } from '@globalart/nestjs-microservices';\n\n@Controller()\nexport class EventController {\n  @TcpPattern('user.event')\n  async handleUserEvent(data: UserEvent) {\n    return this.userService.handleEvent(data);\n  }\n\n  @RedisPattern('cache.update')\n  async handleCacheUpdate(data: CacheData) {\n    return this.cacheService.update(data);\n  }\n\n  @KafkaPattern('log.event')\n  async handleLogEvent(data: LogEvent) {\n    return this.logService.log(data);\n  }\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"type-safety",children:"Type Safety"}),"\n",(0,s.jsx)(r.p,{children:"All decorators support TypeScript typing for better development experience:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"interface UserCreatedEvent {\n  userId: string;\n  email: string;\n  name: string;\n}\n\n@Controller()\nexport class UserController {\n  @TcpPattern('user.created')\n  async handleUserCreated(data: UserCreatedEvent) {\n    // data is fully typed as UserCreatedEvent\n    return this.userService.processUser(data);\n  }\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},2993:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(3917);const s={},a=n.createContext(s);function i(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);