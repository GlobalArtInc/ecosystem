"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[13],{1285:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(3303);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},2795:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"packages/nestjs-logger","title":"NestJS Logger","description":"Professional logging module for NestJS with clean architecture, multiple formats, and built-in security features.","source":"@site/content/packages/nestjs-logger.mdx","sourceDirName":"packages","slug":"/packages/nestjs-logger","permalink":"/packages/nestjs-logger","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/ecosystem/tree/main/docs/content/packages/nestjs-logger.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"NestJS Microservices","permalink":"/packages/nestjs-microservices"},"next":{"title":"Domain Driven Design","permalink":"/packages/ddd"}}');var s=t(7711),i=t(1285);const o={sidebar_position:4},l="NestJS Logger",c={},d=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Async Configuration",id:"async-configuration",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Service Logging",id:"service-logging",level:3},{value:"HTTP Logging",id:"http-logging",level:3},{value:"Global HTTP Logging",id:"global-http-logging",level:3},{value:"Output Formats",id:"output-formats",level:2},{value:"Text Format (Default)",id:"text-format-default",level:3},{value:"JSON Format",id:"json-format",level:3},{value:"Pino Format",id:"pino-format",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"LoggerService Methods",id:"loggerservice-methods",level:3},{value:"LogOptions Interface",id:"logoptions-interface",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Decorators",id:"decorators",level:2},{value:"@LogContext",id:"logcontext",level:3},{value:"@LogMetadata",id:"logmetadata",level:3},{value:"@ExcludeLogging",id:"excludelogging",level:3},{value:"Excluding HTTP Requests",id:"excluding-http-requests",level:2},{value:"Security Features",id:"security-features",level:2},{value:"Automatic Data Sanitization",id:"automatic-data-sanitization",level:3},{value:"Custom Sensitive Fields",id:"custom-sensitive-fields",level:3},{value:"Performance Features",id:"performance-features",level:2},{value:"Customization",id:"customization",level:2},{value:"Custom Formatter",id:"custom-formatter",level:3},{value:"Custom Writer",id:"custom-writer",level:3},{value:"Best Practices",id:"best-practices",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nestjs-logger",children:"NestJS Logger"})}),"\n",(0,s.jsx)(n.p,{children:"Professional logging module for NestJS with clean architecture, multiple formats, and built-in security features."}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @globalart/nestjs-logger\n"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This package provides a comprehensive logging solution for NestJS applications with support for multiple output formats, automatic HTTP request logging, and built-in security features. Built on Clean Architecture principles, it offers excellent performance and extensibility."}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clean Architecture"})," - Separation of concerns with SOLID principles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Safety"})," - Full TypeScript support with IntelliSense"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Optimized"})," - Minimal allocations and efficient queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multiple Formats"})," - Text, JSON, and Pino output support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HTTP Logging"})," - Automatic request/response logging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"})," - Automatic sanitization of sensitive data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensible"})," - Easy to add custom formatters and transports"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module } from "@nestjs/common";\nimport { LoggerModule } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [\n    LoggerModule.forRoot({\n      level: "info",\n      timestamp: true,\n      colors: true,\n      format: "text",\n    }),\n  ],\n})\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { RequestMethod } from "@nestjs/common";\n\nLoggerModule.forRoot({\n  level: "debug",\n  timestamp: true,\n  colors: true,\n  format: "json",\n  sensitiveFields: ["password", "secret"],\n  exclude: [\n    { method: RequestMethod.GET, path: "/health" },\n    { method: RequestMethod.ALL, path: "/favicon.ico" },\n  ],\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"async-configuration",children:"Async Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { ConfigService } from "@nestjs/config";\n\nLoggerModule.forRootAsync({\n  useFactory: (configService: ConfigService) => ({\n    level: configService.get("LOG_LEVEL", "info"),\n    format: configService.get("LOG_FORMAT", "text"),\n    colors: !configService.get("PRODUCTION"),\n    sensitiveFields: configService.get("SENSITIVE_FIELDS", []),\n  }),\n  inject: [ConfigService],\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"service-logging",children:"Service Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { InjectLogger, LoggerService } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectLogger()\n    private readonly logger: LoggerService\n  ) {}\n\n  async createUser(userData: CreateUserDto) {\n    this.logger.log({\n      message: "Creating new user",\n      metadata: { email: userData.email },\n    });\n\n    try {\n      const user = await this.userRepository.save(userData);\n      this.logger.log({\n        message: "User created successfully",\n        metadata: { id: user.id },\n      });\n      return user;\n    } catch (error) {\n      this.logger.error({\n        message: "Failed to create user",\n        trace: error.stack,\n        metadata: { email: userData.email },\n      });\n      throw error;\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"http-logging",children:"HTTP Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Controller, UseInterceptors } from "@nestjs/common";\nimport { HttpLoggerInterceptor, LogContext } from "@globalart/nestjs-logger";\n\n@Controller("users")\n@UseInterceptors(HttpLoggerInterceptor)\n@LogContext("UserController")\nexport class UserController {\n  // All HTTP requests will be automatically logged\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"global-http-logging",children:"Global HTTP Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Module } from "@nestjs/common";\nimport { APP_INTERCEPTOR } from "@nestjs/core";\nimport { LoggerModule, HttpLoggerInterceptor } from "@globalart/nestjs-logger";\n\n@Module({\n  imports: [LoggerModule.forRoot()],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: HttpLoggerInterceptor,\n    },\n  ],\n})\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"output-formats",children:"Output Formats"}),"\n",(0,s.jsx)(n.h3,{id:"text-format-default",children:"Text Format (Default)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[2024-01-15T10:30:45.123Z] [INFO] [UserService] Creating new user {"email":"user@example.com"}\n[2024-01-15T10:30:45.335Z] [INFO] [HttpLogger] GET /users - 200 (12ms)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:30:45.123Z",\n  "level": "info",\n  "message": "Creating new user",\n  "context": "UserService",\n  "metadata": {"email": "user@example.com"}\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pino-format",children:"Pino Format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "level": 30,\n  "time": 1642247445123,\n  "pid": 1234,\n  "hostname": "app-server",\n  "req": {\n    "id": "req-123",\n    "method": "GET",\n    "url": "/users",\n    "remoteAddress": "127.0.0.1"\n  },\n  "res": { "statusCode": 200 },\n  "responseTime": 12,\n  "msg": "request completed"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(n.h3,{id:"loggerservice-methods",children:"LoggerService Methods"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"log(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Information message"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Error with stack trace"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"warn(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Warning message"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"debug(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Debug information"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"verbose(options: LogOptions)"})}),(0,s.jsx)(n.td,{children:"Verbose logging"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"logoptions-interface",children:"LogOptions Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface LogOptions {\n  message: string;\n  context?: string;\n  metadata?: Record<string, unknown>;\n  trace?: string;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Option"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"level"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LogLevel"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'info'"})}),(0,s.jsx)(n.td,{children:"Logging level"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"timestamp"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Show timestamp"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"colors"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})}),(0,s.jsx)(n.td,{children:"Colored output"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"format"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"LogFormat"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"'text'"})}),(0,s.jsx)(n.td,{children:"Output format"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"context"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Default context"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sensitiveFields"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string[]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[...]"})}),(0,s.jsx)(n.td,{children:"Fields to sanitize"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"exclude"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ExcludeOption[]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[]"})}),(0,s.jsx)(n.td,{children:"HTTP requests to exclude from logging"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,s.jsx)(n.h3,{id:"logcontext",children:"@LogContext"}),"\n",(0,s.jsx)(n.p,{children:"Set context for class or method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'@Controller("users")\n@LogContext("UserController")\nexport class UserController {\n  @Get()\n  @LogContext("UserController.getAllUsers")\n  async getAllUsers() {\n    // Context will be "UserController.getAllUsers"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"logmetadata",children:"@LogMetadata"}),"\n",(0,s.jsx)(n.p,{children:"Add metadata to logs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'@Controller("users")\nexport class UserController {\n  @Get()\n  @LogMetadata({ operation: "getAllUsers", version: "v1" })\n  async getAllUsers() {\n    // Metadata will be included in all logs\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"excludelogging",children:"@ExcludeLogging"}),"\n",(0,s.jsx)(n.p,{children:"Exclude specific endpoints from logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'@Controller("health")\nexport class HealthController {\n  @Get()\n  @ExcludeLogging()\n  async check() {\n    return { status: "ok" };\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"excluding-http-requests",children:"Excluding HTTP Requests"}),"\n",(0,s.jsx)(n.p,{children:"Configure which requests to exclude from logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'LoggerModule.forRoot({\n  exclude: [\n    // Health checks\n    { method: RequestMethod.GET, path: "/health" },\n    { method: RequestMethod.GET, path: "/metrics" },\n    \n    // Static assets\n    { method: RequestMethod.ALL, path: "/favicon.ico" },\n    { method: RequestMethod.ALL, path: "/robots.txt" },\n    \n    // Wildcard patterns\n    { method: RequestMethod.GET, path: "/api/*/health" },\n    { method: RequestMethod.ALL, path: "/static/*" },\n  ],\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-data-sanitization",children:"Automatic Data Sanitization"}),"\n",(0,s.jsx)(n.p,{children:"The logger automatically sanitizes sensitive fields:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"password"}),", ",(0,s.jsx)(n.code,{children:"pass"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"token"}),", ",(0,s.jsx)(n.code,{children:"accessToken"}),", ",(0,s.jsx)(n.code,{children:"refreshToken"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"secret"}),", ",(0,s.jsx)(n.code,{children:"key"}),", ",(0,s.jsx)(n.code,{children:"apiKey"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authorization"}),", ",(0,s.jsx)(n.code,{children:"auth"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"credential"}),", ",(0,s.jsx)(n.code,{children:"credentials"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-sensitive-fields",children:"Custom Sensitive Fields"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'LoggerModule.forRoot({\n  sensitiveFields: ["password", "secret", "customField"],\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-features",children:"Performance Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimal allocations"})," in hot paths"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy initialization"})," to reduce startup time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimized context resolution"})," with caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient data sanitization"})," with minimal overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Format-specific optimizations"})," for different output types"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(n.h3,{id:"custom-formatter",children:"Custom Formatter"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { BaseFormatter, LogEntry } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class CustomFormatter extends BaseFormatter {\n  format(entry: LogEntry): string {\n    return `[${entry.level.toUpperCase()}] ${entry.message}`;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"custom-writer",children:"Custom Writer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { Injectable } from "@nestjs/common";\nimport { ILogWriter } from "@globalart/nestjs-logger";\n\n@Injectable()\nexport class FileWriter implements ILogWriter {\n  write(formattedLog: string): void {\n    // Write to file, database, or external service\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Structured Logging"})," - Include relevant metadata in your log entries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set Appropriate Log Levels"})," - Use debug/verbose for development, info/warn/error for production"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exclude Health Checks"})," - Prevent log spam from monitoring endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sanitize Sensitive Data"})," - Configure sensitive fields to prevent data leakage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Context"})," - Set meaningful context names for better log organization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance Monitoring"})," - Use HTTP logging to monitor API performance"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);