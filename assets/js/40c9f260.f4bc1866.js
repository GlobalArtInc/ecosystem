"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[749],{1285:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var i=r(3303);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},4756:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"packages/nestjs-typeorm-pagination","title":"NestJS TypeORM Pagination","description":"Advanced pagination, filtering, sorting, and search capabilities for TypeORM repositories in NestJS applications.","source":"@site/content/packages/nestjs-typeorm-pagination.mdx","sourceDirName":"packages","slug":"/packages/nestjs-typeorm-pagination","permalink":"/packages/nestjs-typeorm-pagination","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/ecosystem/tree/main/docs/content/packages/nestjs-typeorm-pagination.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"NestJS Swagger","permalink":"/packages/nestjs-swagger"},"next":{"title":"NestJS Microservices","permalink":"/packages/nestjs-microservices"}}');var t=r(7711),s=r(1285);const l={sidebar_position:2},a="NestJS TypeORM Pagination",o={},c=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"PaginateConfig Interface",id:"paginateconfig-interface",level:3},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Pagination",id:"pagination",level:3},{value:"Sorting",id:"sorting",level:3},{value:"Search",id:"search",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Pagination",id:"basic-pagination",level:3},{value:"With Search and Filtering",id:"with-search-and-filtering",level:3},{value:"With Relations",id:"with-relations",level:3},{value:"Using Query Builder",id:"using-query-builder",level:3},{value:"Filter Operators",id:"filter-operators",level:2},{value:"Response Structure",id:"response-structure",level:2},{value:"Swagger Integration",id:"swagger-integration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance Tips",id:"performance-tips",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"nestjs-typeorm-pagination",children:"NestJS TypeORM Pagination"})}),"\n",(0,t.jsx)(n.p,{children:"Advanced pagination, filtering, sorting, and search capabilities for TypeORM repositories in NestJS applications."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @globalart/nestjs-typeorm-pagination\n"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This package provides a comprehensive solution for implementing pagination, filtering, sorting, and searching in your NestJS applications using TypeORM. It includes decorators, DTOs, and utility functions that make it easy to add these features to your API endpoints."}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pagination"})," - Configurable page-based pagination with limits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search"})," - Full-text search across multiple columns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Filtering"})," - Advanced filtering with multiple operators"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sorting"})," - Multi-column sorting with custom order"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Swagger Integration"})," - Automatic OpenAPI documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"})," - Full TypeScript support with IntelliSense"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Optimized"})," - Efficient queries with proper indexing"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\nimport { Paginate, PaginateQuery, paginate, Paginated } from '@globalart/nestjs-typeorm-pagination';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository<User>,\n  ) {}\n\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsx)(n.h3,{id:"paginateconfig-interface",children:"PaginateConfig Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface PaginateConfig<T> {\n  sortableColumns: Column<T>[];                    // Columns that can be sorted\n  searchableColumns?: Column<T>[];                 // Columns to search in\n  filterableColumns?: {                            // Filterable columns and operators\n    [key in Column<T>]?: (FilterOperator | FilterSuffix)[] | true;\n  };\n  relations?: FindOptionsRelations<T>;             // Relations to include\n  select?: Column<T>[];                            // Columns to select\n  maxLimit?: number;                               // Maximum items per page\n  defaultSortBy?: SortBy<T>;                       // Default sorting\n  defaultLimit?: number;                           // Default items per page\n  where?: FindOptionsWhere<T>;                     // Additional where conditions\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"page"})," - Page number (default: 1)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"limit"})," - Items per page (default: 20, max: 100)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"sorting",children:"Sorting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sortBy"})," - Sort configuration in format ",(0,t.jsx)(n.code,{children:"column:direction"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?sortBy=name:ASC&sortBy=createdAt:DESC"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"search",children:"Search"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"search"})," - Search term"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"searchBy"})," - Columns to search in","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?search=john&searchBy=name&searchBy=email"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filter.column"})," - Filter by specific column","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.code,{children:"?filter.name=john&filter.createdAt.gte=2023-01-01"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"basic-pagination",children:"Basic Pagination"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('users')\nexport class UsersController {\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      defaultSortBy: [['createdAt', 'DESC']],\n      defaultLimit: 20,\n      maxLimit: 100,\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-search-and-filtering",children:"With Search and Filtering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('users')\nexport class UsersController {\n  @Get()\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n        status: ['eq', 'in'],\n      },\n      defaultSortBy: [['createdAt', 'DESC']],\n      defaultLimit: 20,\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"with-relations",children:"With Relations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('posts')\nexport class PostsController {\n  @Get()\n  async getPosts(@Paginate() query: PaginateQuery): Promise<Paginated<Post>> {\n    return paginate(query, this.postRepository, {\n      sortableColumns: ['id', 'title', 'createdAt'],\n      searchableColumns: ['title', 'content'],\n      relations: ['author', 'categories'],\n      filterableColumns: {\n        authorId: ['eq'],\n        categoryId: ['in'],\n        published: ['eq'],\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-query-builder",children:"Using Query Builder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@Controller('users')\nexport class UsersController {\n  @Get('active')\n  async getActiveUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    const queryBuilder = this.userRepository\n      .createQueryBuilder('user')\n      .where('user.isActive = :isActive', { isActive: true });\n\n    return paginate(query, queryBuilder, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"filter-operators",children:"Filter Operators"}),"\n",(0,t.jsx)(n.p,{children:"The package supports various filter operators:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operator"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"eq"})}),(0,t.jsx)(n.td,{children:"Equal"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.status=active"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ne"})}),(0,t.jsx)(n.td,{children:"Not equal"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.status.ne=inactive"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gt"})}),(0,t.jsx)(n.td,{children:"Greater than"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.age.gt=18"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"gte"})}),(0,t.jsx)(n.td,{children:"Greater than or equal"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.age.gte=21"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lt"})}),(0,t.jsx)(n.td,{children:"Less than"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.score.lt=100"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lte"})}),(0,t.jsx)(n.td,{children:"Less than or equal"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.score.lte=90"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"in"})}),(0,t.jsx)(n.td,{children:"In array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.status.in=active,pending"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"notIn"})}),(0,t.jsx)(n.td,{children:"Not in array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.role.notIn=admin,super"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"like"})}),(0,t.jsx)(n.td,{children:"Like pattern"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.name.like=%john%"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"notLike"})}),(0,t.jsx)(n.td,{children:"Not like pattern"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.email.notLike=%test%"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"isNull"})}),(0,t.jsx)(n.td,{children:"Is null"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.deletedAt.isNull"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"isNotNull"})}),(0,t.jsx)(n.td,{children:"Is not null"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"filter.verifiedAt.isNotNull"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"response-structure",children:"Response Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Paginated<T> {\n  data: T[];                    // Array of items\n  payload: {\n    pagination: {\n      limit: number;            // Items per page\n      totalItems: number;       // Total number of items\n      page: number;             // Current page\n      total: number;            // Total number of pages\n      sortBy: SortBy<T>;        // Current sorting\n      searchBy: Column<T>[];    // Search columns\n      search: string;           // Search term\n      select: string[];         // Selected columns\n      filter?: Record<string, string | string[]>; // Applied filters\n      links: PaginationLink[];  // Pagination links\n    };\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"swagger-integration",children:"Swagger Integration"}),"\n",(0,t.jsx)(n.p,{children:"The package includes Swagger decorators for automatic API documentation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { \n  Paginate, \n  PaginateQuery,\n  ApiPaginatedQuery,\n  ApiOkPaginatedResponse \n} from '@globalart/nestjs-typeorm-pagination';\n\n@Controller('users')\nexport class UsersController {\n  @Get()\n  @ApiPaginatedQuery()\n  @ApiOkPaginatedResponse(User)\n  async getUsers(@Paginate() query: PaginateQuery): Promise<Paginated<User>> {\n    return paginate(query, this.userRepository, {\n      sortableColumns: ['id', 'name', 'email', 'createdAt'],\n      searchableColumns: ['name', 'email'],\n      filterableColumns: {\n        name: true,\n        email: true,\n        createdAt: ['gte', 'lte'],\n      },\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Define Sortable Columns"})," - Always specify which columns can be sorted to prevent SQL injection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set Reasonable Limits"})," - Use ",(0,t.jsx)(n.code,{children:"maxLimit"})," to prevent performance issues"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Index Searchable Columns"})," - Add database indexes on columns used for search"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Relations Wisely"})," - Only load necessary relations to avoid N+1 queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate Filter Operators"})," - Only allow safe filter operators for each column"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache When Possible"})," - Consider caching for frequently accessed data"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Add database indexes on sortable and searchable columns"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"select"})," to limit returned columns when full entities aren't needed"]}),"\n",(0,t.jsx)(n.li,{children:"Consider using query builder for complex queries with joins"}),"\n",(0,t.jsxs)(n.li,{children:["Set appropriate ",(0,t.jsx)(n.code,{children:"maxLimit"})," to prevent large result sets"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"withDeleted: false"})," when you don't need soft-deleted records"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);