"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[461],{2993:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(3917);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},4947:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"packages/ddd","title":"Domain Driven Design","description":"Comprehensive Domain-Driven Design toolkit providing essential building blocks for robust, maintainable domain models.","source":"@site/content/packages/ddd.mdx","sourceDirName":"packages","slug":"/packages/ddd","permalink":"/packages/ddd","draft":false,"unlisted":false,"editUrl":"https://github.com/GlobalArtInc/ecosystem/tree/main/docs/content/packages/ddd.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"NestJS Logger","permalink":"/packages/nestjs-logger"}}');var t=i(1273),a=i(2993);const r={sidebar_position:5},o="Domain Driven Design",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Aggregate Root",id:"aggregate-root",level:3},{value:"Value Objects",id:"value-objects",level:3},{value:"Commands and Queries",id:"commands-and-queries",level:3},{value:"Core Components",id:"core-components",level:2},{value:"Aggregate Root",id:"aggregate-root-1",level:3},{value:"Value Objects",id:"value-objects-1",level:3},{value:"Built-in Value Objects",id:"built-in-value-objects",level:3},{value:"Specifications",id:"specifications",level:3},{value:"Filtering System",id:"filtering-system",level:3},{value:"Repository Pattern",id:"repository-pattern",level:3},{value:"Pagination Support",id:"pagination-support",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Domain Events",id:"domain-events",level:3},{value:"Complex Specifications",id:"complex-specifications",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Integration with NestJS",id:"integration-with-nestjs",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"domain-driven-design",children:"Domain Driven Design"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive Domain-Driven Design toolkit providing essential building blocks for robust, maintainable domain models."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install @globalart/ddd\n"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@globalart/ddd"})," package provides a complete set of building blocks for implementing Domain-Driven Design patterns in your NestJS applications. It includes base classes, value objects, specifications, and utilities that help you build clean, maintainable domain models."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Aggregate Root"})," - Base class for domain aggregates with event management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Value Objects"})," - Type-safe value objects with equality comparison"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"CQRS Support"})," - Command and query base classes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Specifications"})," - Composite specification pattern for business rules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repository Pattern"})," - Abstract repository interfaces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Domain Events"})," - Event-driven architecture support"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"})," - Full TypeScript support throughout"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"aggregate-root",children:"Aggregate Root"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { AggregateRoot } from '@globalart/ddd';\n\nclass UserCreatedEvent {\n  constructor(\n    public readonly userId: string,\n    public readonly email: string,\n    public readonly timestamp: Date = new Date()\n  ) {}\n}\n\nclass User extends AggregateRoot<UserCreatedEvent> {\n  constructor(\n    public readonly id: string,\n    public readonly email: string,\n    public readonly name: string\n  ) {\n    super();\n    this.addDomainEvent(new UserCreatedEvent(id, email));\n  }\n\n  changeEmail(newEmail: string): void {\n    // Business logic here\n    this.addDomainEvent(new UserEmailChangedEvent(this.id, newEmail));\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"value-objects",children:"Value Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ValueObject } from '@globalart/ddd';\n\nclass Email extends ValueObject<{ value: string }> {\n  constructor(value: string) {\n    if (!this.isValidEmail(value)) {\n      throw new Error('Invalid email format');\n    }\n    super({ value });\n  }\n\n  private isValidEmail(email: string): boolean {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n\n  get value(): string {\n    return this.props.value;\n  }\n}\n\n// Usage\nconst email = new Email('user@example.com');\nconst emailValue = email.value; // 'user@example.com'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"commands-and-queries",children:"Commands and Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Command, Query } from '@globalart/ddd';\n\nclass CreateUserCommand extends Command {\n  constructor(\n    public readonly email: string,\n    public readonly name: string,\n    correlationId?: string\n  ) {\n    super({ correlationId });\n  }\n}\n\nclass GetUserQuery extends Query {\n  constructor(public readonly userId: string) {\n    super();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"aggregate-root-1",children:"Aggregate Root"}),"\n",(0,t.jsx)(n.p,{children:"Base class for domain aggregates that manages domain events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { AggregateRoot } from '@globalart/ddd';\n\nabstract class AggregateRoot<EventType> {\n  protected addDomainEvent(event: EventType): void;\n  getDomainEvents(): EventType[];\n  clearDomainEvents(): void;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"value-objects-1",children:"Value Objects"}),"\n",(0,t.jsx)(n.p,{children:"Type-safe value objects with built-in equality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ValueObject } from '@globalart/ddd';\n\nabstract class ValueObject<T> {\n  protected readonly props: T;\n  \n  constructor(props: T);\n  equals(vo?: ValueObject<T>): boolean;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"built-in-value-objects",children:"Built-in Value Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Id, NanoId, StringVO, BooleanVO, DateVO } from '@globalart/ddd';\n\n// UUID-based identifier\nconst userId = new Id();\n\n// NanoID-based identifier  \nconst sessionId = new NanoId();\n\n// String value object\nconst userName = new StringVO('john_doe');\n\n// Boolean value object\nconst isActive = new BooleanVO(true);\n\n// Date value object\nconst createdAt = new DateVO(new Date());\n"})}),"\n",(0,t.jsx)(n.h3,{id:"specifications",children:"Specifications"}),"\n",(0,t.jsx)(n.p,{children:"Implement business rules using the specification pattern:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { CompositeSpecification, Result, Ok, Err } from '@globalart/ddd';\n\nclass UserEmailSpecification extends CompositeSpecification<User> {\n  isSatisfiedBy(user: User): boolean {\n    return user.email.includes('@') && user.email.includes('.');\n  }\n\n  mutate(user: User): Result<User, string> {\n    return this.isSatisfiedBy(user) \n      ? Ok(user) \n      : Err('Invalid email format');\n  }\n}\n\n// Usage\nconst emailSpec = new UserEmailSpecification();\nconst ageSpec = new UserAgeSpecification(18);\n\n// Combine specifications\nconst validUserSpec = emailSpec.and(ageSpec);\nconst isValidUser = validUserSpec.isSatisfiedBy(user);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filtering-system",children:"Filtering System"}),"\n",(0,t.jsx)(n.p,{children:"Advanced filtering with type-safe operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { StringFilter, NumberFilter, DateFilter } from '@globalart/ddd';\n\n// String filtering\nconst nameFilter = new StringFilter('name', 'contains', 'john');\n\n// Number filtering  \nconst ageFilter = new NumberFilter('age', 'gte', 18);\n\n// Date filtering\nconst createdFilter = new DateFilter('createdAt', 'after', new Date('2023-01-01'));\n\n// Combine filters\nconst combinedFilter = nameFilter.and(ageFilter).and(createdFilter);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Abstract repository interface for data access:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Repository } from '@globalart/ddd';\n\ninterface UserRepository extends Repository<User> {\n  findByEmail(email: Email): Promise<User | null>;\n  findActiveUsers(): Promise<User[]>;\n  save(user: User): Promise<void>;\n  delete(id: string): Promise<void>;\n}\n\n// Implementation\nclass TypeOrmUserRepository implements UserRepository {\n  async findByEmail(email: Email): Promise<User | null> {\n    // Implementation using TypeORM\n  }\n  \n  async save(user: User): Promise<void> {\n    // Save user and publish domain events\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pagination-support",children:"Pagination Support"}),"\n",(0,t.jsx)(n.p,{children:"Built-in pagination with validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { IPagination, ISort, paginationSchema } from '@globalart/ddd';\n\nconst pagination: IPagination = {\n  limit: 10,\n  offset: 0\n};\n\nconst sorting: ISort = {\n  field: 'createdAt',\n  direction: 'DESC'\n};\n\n// Validation using Zod schema\nconst validatedPagination = paginationSchema.parse(pagination);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"domain-events",children:"Domain Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class OrderCreatedEvent {\n  constructor(\n    public readonly orderId: string,\n    public readonly customerId: string,\n    public readonly amount: number,\n    public readonly timestamp: Date = new Date()\n  ) {}\n}\n\nclass Order extends AggregateRoot<OrderCreatedEvent | OrderShippedEvent> {\n  constructor(\n    public readonly id: string,\n    public readonly customerId: string,\n    private _amount: number\n  ) {\n    super();\n    this.addDomainEvent(new OrderCreatedEvent(id, customerId, _amount));\n  }\n\n  ship(): void {\n    // Business logic\n    this.addDomainEvent(new OrderShippedEvent(this.id));\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"complex-specifications",children:"Complex Specifications"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class PremiumUserSpecification extends CompositeSpecification<User> {\n  isSatisfiedBy(user: User): boolean {\n    return user.subscriptionType === 'premium' && user.isActive;\n  }\n}\n\nclass RecentActivitySpecification extends CompositeSpecification<User> {\n  constructor(private daysThreshold: number = 30) {\n    super();\n  }\n\n  isSatisfiedBy(user: User): boolean {\n    const daysSinceLastActivity = Date.now() - user.lastActivityAt.getTime();\n    return daysSinceLastActivity <= this.daysThreshold * 24 * 60 * 60 * 1000;\n  }\n}\n\n// Combine specifications\nconst eligibleForOfferSpec = new PremiumUserSpecification()\n  .and(new RecentActivitySpecification(7));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep Aggregates Small"})," - Focus on consistency boundaries rather than data relationships"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Value Objects"})," - Encapsulate primitive values with business meaning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement Specifications"})," - Use the specification pattern for complex business rules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle Domain Events"})," - Use domain events for decoupling and side effects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repository Abstraction"})," - Keep domain logic independent of data access concerns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate at Boundaries"})," - Use value objects and specifications to enforce invariants"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-nestjs",children:"Integration with NestJS"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\n\n@CommandHandler(CreateUserCommand)\n@Injectable()\nexport class CreateUserHandler implements ICommandHandler<CreateUserCommand> {\n  constructor(private userRepository: UserRepository) {}\n\n  async execute(command: CreateUserCommand): Promise<void> {\n    const email = new Email(command.email);\n    const user = new User(new Id().value, email.value, command.name);\n    \n    await this.userRepository.save(user);\n    \n    // Domain events are handled automatically\n  }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);